#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å Stanford Dogs –¥–∞—Ç–∞—Å–µ—Ç–æ–º
–°–∫–∞—á–∏–≤–∞–Ω–∏–µ, –æ–±—É—á–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import subprocess
import sys
import os
from pathlib import Path
import torch

def run_script(script_path, description):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    print(f"\nüöÄ {description}")
    print("=" * 50)
    
    try:
        result = subprocess.run([sys.executable, script_path], check=True, capture_output=True, text=True)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        if result.stdout:
            print("–í—ã–≤–æ–¥:")
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if e.stdout:
            print("–í—ã–≤–æ–¥:")
            print(e.stdout)
        if e.stderr:
            print("–û—à–∏–±–∫–∏:")
            print(e.stderr)
        return False

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PyTorch
    try:
        import torch
        print(f"‚úÖ PyTorch: {torch.__version__}")
        if torch.cuda.is_available():
            print(f"‚úÖ CUDA: {torch.version.cuda}")
        else:
            print("‚ö†Ô∏è CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
    except ImportError:
        print("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    required_packages = ['transformers', 'torchvision', 'PIL', 'tqdm', 'sklearn', 'matplotlib']
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üêï Stanford Dogs FAN Experiment")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if not check_requirements():
        print("\n‚ùå –ù–µ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    Path("data").mkdir(exist_ok=True)
    Path("models").mkdir(exist_ok=True)
    Path("models/stanford_dogs").mkdir(exist_ok=True)
    Path("scripts").mkdir(exist_ok=True)
    
    # –®–∞–≥ 1: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
    print("\nüì• –®–∞–≥ 1: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    if not run_script("scripts/download_stanford_dogs.py", "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Stanford Dogs –¥–∞—Ç–∞—Å–µ—Ç–∞"):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω
    data_dir = Path("data/stanford_dogs_fan")
    if not data_dir.exists() or not (data_dir / "train.jsonl").exists():
        print("‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        return
    
    print(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω: {data_dir}")
    
    # –®–∞–≥ 2: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\nüß† –®–∞–≥ 2: –û–±—É—á–µ–Ω–∏–µ FAN –º–æ–¥–µ–ª–∏")
    if not run_script("scripts/train_stanford_dogs.py", "–û–±—É—á–µ–Ω–∏–µ FAN –º–æ–¥–µ–ª–∏"):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞
    model_path = Path("models/stanford_dogs/best_stanford_dogs_fan_model.pth")
    if not model_path.exists():
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        return
    
    print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_path}")
    
    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüß™ –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
    try:
        checkpoint = torch.load(model_path, map_location='cpu')
        best_f1 = checkpoint.get('f1_score', 0.0)
        best_acc = checkpoint.get('accuracy', 0.0)
        
        print(f"üìä –õ—É—á—à–∏–π F1 Score: {best_f1:.4f}")
        print(f"üìä –õ—É—á—à–∞—è Accuracy: {best_acc:.4f}")
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if best_f1 >= 0.75:
            print("\nüéâ –£–°–ü–ï–•! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
            print(f"‚úÖ F1 Score >= 0.75: {best_f1:.4f}")
            print("üöÄ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏!")
        else:
            print(f"\n‚ö†Ô∏è –¶–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞")
            print(f"‚ùå F1 Score < 0.75: {best_f1:.4f}")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   - –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö")
            print("   - –ò–∑–º–µ–Ω–∏—Ç–µ learning rate")
            print("   - –î–æ–±–∞–≤—å—Ç–µ data augmentation")
            print("   - –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    print("\nüèÅ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
    print("   - data/stanford_dogs_fan/")
    print("   - models/stanford_dogs/")

if __name__ == "__main__":
    main()

