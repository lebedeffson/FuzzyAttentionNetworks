#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã FAN —Å –Ω–µ–∂–Ω—ã–º–∏, –º—è–≥–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥ –¥–ª—è —Å—Ç–∞—Ç—å–∏ —É—Ä–æ–≤–Ω—è A
"""

def create_soft_fan_architecture():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ö–µ–º—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã FAN —Å –º—è–≥–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏"""
    
    dot_content = """
digraph FAN_Architecture {
    rankdir=TB;
    size="10,12";
    dpi=300;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∑–ª–æ–≤
    node [fontname="Arial", fontsize=11, shape=box, style=filled, penwidth=1.5];
    edge [fontname="Arial", fontsize=9, penwidth=1.5, color="#666666"];
    
    // –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –º—è–≥–∫–∏–µ –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ
    text_input [label="Text Input\\n\\"Golden retriever dog\\"", fillcolor="#E8F4FD", shape=ellipse, fontcolor="#2C3E50", penwidth=2];
    image_input [label="Image Input\\n224√ó224√ó3", fillcolor="#E8F8F5", shape=ellipse, fontcolor="#2C3E50", penwidth=2];
    
    // –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—É—Ç—å - –Ω–µ–∂–Ω—ã–µ –æ—Ä–∞–Ω–∂–µ–≤—ã–µ
    bert_tokenizer [label="BERT Tokenizer", fillcolor="#FFF2E6", fontcolor="#8B4513"];
    bert_encoder [label="BERT Encoder\\n12 Layers", fillcolor="#FFE4CC", fontcolor="#8B4513"];
    text_projection [label="Text Projection\\n768‚Üí512", fillcolor="#FFD9B3", fontcolor="#8B4513"];
    
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Ç—å - –º—è–≥–∫–∏–µ –∑–µ–ª–µ–Ω—ã–µ
    resnet_backbone [label="ResNet Backbone", fillcolor="#E8F5E8", fontcolor="#2E7D32"];
    image_projection [label="Image Projection\\n2048‚Üí512", fillcolor="#D4EDDA", fontcolor="#2E7D32"];
    
    // Attention –º–µ—Ö–∞–Ω–∏–∑–º - –Ω–µ–∂–Ω—ã–µ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ
    query_proj [label="Query\\nLinear(512‚Üí512)", fillcolor="#F3E5F5", fontcolor="#6A1B9A"];
    key_proj [label="Key\\nLinear(512‚Üí512)", fillcolor="#E1BEE7", fontcolor="#6A1B9A"];
    value_proj [label="Value\\nLinear(512‚Üí512)", fillcolor="#CE93D8", fontcolor="#6A1B9A"];
    
    // Fuzzy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - –º—è–≥–∫–∏–µ —Ä–æ–∑–æ–≤—ã–µ
    fuzzy_centers [label="Fuzzy Centers\\nŒº‚ÇÅ, Œº‚ÇÇ, ..., Œº‚Çñ", fillcolor="#FCE4EC", shape=diamond, fontcolor="#C2185B"];
    fuzzy_widths [label="Fuzzy Widths\\nœÉ‚ÇÅ, œÉ‚ÇÇ, ..., œÉ‚Çñ", fillcolor="#F8BBD9", shape=diamond, fontcolor="#C2185B"];
    bell_membership [label="Bell Membership\\nŒº(x) = 1/(1+((x-Œº)/œÉ)¬≤)", fillcolor="#F48FB1", shape=ellipse, fontcolor="#C2185B"];
    
    // Attention –≤—ã—á–∏—Å–ª–µ–Ω–∏—è - –Ω–µ–∂–Ω—ã–µ —Å–∏–Ω–∏–µ
    attention_weights [label="Attention Weights\\nSoftmax(QK·µÄ/‚àöd)", fillcolor="#E3F2FD", fontcolor="#1565C0"];
    attended_values [label="Attended Values\\nAttention √ó V", fillcolor="#BBDEFB", fontcolor="#1565C0"];
    
    // Fusion - –º—è–≥–∫–∏–µ –∂–µ–ª—Ç—ã–µ
    concat_fusion [label="Concatenation\\n[text; image; attention]", fillcolor="#FFFDE7", fontcolor="#F57F17"];
    fusion_layer [label="Fusion Layer\\nLinear(1536‚Üí512)", fillcolor="#FFF9C4", fontcolor="#F57F17"];
    dropout [label="Dropout + ReLU", fillcolor="#FFF59D", fontcolor="#F57F17"];
    
    // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä - –Ω–µ–∂–Ω—ã–µ –±–∏—Ä—é–∑–æ–≤—ã–µ
    classifier [label="Classifier\\nLinear(512‚Üíclasses)", fillcolor="#E0F2F1", fontcolor="#00695C"];
    softmax [label="Softmax", fillcolor="#B2DFDB", fontcolor="#00695C"];
    prediction [label="Prediction\\nClass + Confidence", fillcolor="#80CBC4", shape=ellipse, fontcolor="#00695C"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—É—Ç—å
    text_input -> bert_tokenizer [label="Tokenize", color="#3498DB"];
    bert_tokenizer -> bert_encoder [label="Encode", color="#E67E22"];
    bert_encoder -> text_projection [label="Project", color="#D35400"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Ç—å
    image_input -> resnet_backbone [label="Extract", color="#27AE60"];
    resnet_backbone -> image_projection [label="Project", color="#229954"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - attention –º–µ—Ö–∞–Ω–∏–∑–º
    text_projection -> query_proj [label="Q", color="#D35400"];
    text_projection -> key_proj [label="K", color="#D35400"];
    text_projection -> value_proj [label="V", color="#D35400"];
    
    fuzzy_centers -> bell_membership [label="Œº", color="#E91E63"];
    fuzzy_widths -> bell_membership [label="œÉ", color="#C2185B"];
    
    query_proj -> attention_weights [label="Q", color="#8E24AA"];
    key_proj -> attention_weights [label="K", color="#7B1FA2"];
    bell_membership -> attention_weights [label="Fuzzy", color="#AD1457"];
    
    attention_weights -> attended_values [label="Attend", color="#1976D2"];
    value_proj -> attended_values [label="V", color="#6A1B9A"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - fusion
    text_projection -> concat_fusion [label="Text", color="#D35400"];
    image_projection -> concat_fusion [label="Image", color="#229954"];
    attended_values -> concat_fusion [label="Attention", color="#1976D2"];
    
    concat_fusion -> fusion_layer [label="Fuse", color="#F39C12"];
    fusion_layer -> dropout [label="Process", color="#E67E22"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    dropout -> classifier [label="Classify", color="#F39C12"];
    classifier -> softmax [label="Normalize", color="#00ACC1"];
    softmax -> prediction [label="Output", color="#0097A7"];
    
    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ - –Ω–µ–∂–Ω—ã–π —Å–µ—Ä—ã–π
    formula [label="Attention(Q,K,V) = softmax(QK^T/‚àöd + F(Œº,œÉ))V", 
             fillcolor="#F8F9FA", shape=plaintext, fontsize=10, fontcolor="#495057", penwidth=1];
    
    // –°–æ–µ–¥–∏–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É
    formula -> attention_weights [style=dashed, color="#6C757D"];
}
"""
    return dot_content

def main():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É —Å –º—è–≥–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏"""
    
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã —Å –Ω–µ–∂–Ω—ã–º–∏, –º—è–≥–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    import os
    os.makedirs('diagrams', exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É
    final_dot = create_soft_fan_architecture()
    with open('diagrams/fan_architecture_soft.dot', 'w', encoding='utf-8') as f:
        f.write(final_dot)
    
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: diagrams/fan_architecture_soft.dot")
    
    # –°–æ–∑–¥–∞–µ–º LaTeX –∫–æ–¥
    latex_code = """
% –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã FAN —Å –º—è–≥–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏
\\begin{figure}[htbp]
    \\centering
    \\includegraphics[width=0.85\\textwidth]{diagrams/fan_architecture_soft.png}
    \\caption{–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Fuzzy Attention Networks (FAN). –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã —á–µ—Ä–µ–∑ BERT –∏ ResNet —ç–Ω–∫–æ–¥–µ—Ä—ã, –ø—Ä–∏–º–µ–Ω—è–µ—Ç fuzzy attention –º–µ—Ö–∞–Ω–∏–∑–º —Å bell membership —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –º–æ–¥—É–ª—è—Ü–∏–∏ attention weights, –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.}
    \\label{fig:fan_architecture}
\\end{figure}
"""
    
    with open('diagrams/latex_soft.tex', 'w', encoding='utf-8') as f:
        f.write(latex_code)
    
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: diagrams/latex_soft.tex")
    
    print("\nüéâ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —Å –º—è–≥–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∞!")
    print("üìÅ –§–∞–π–ª: diagrams/fan_architecture_soft.dot")
    print("üìù LaTeX: diagrams/latex_soft.tex")
    
    print("\nüé® –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ (–Ω–µ–∂–Ω—ã–µ —Ç–æ–Ω–∞):")
    print("   üíô –ì–æ–ª—É–±–æ–π - –í—Ö–æ–¥—ã")
    print("   üß° –ü–µ—Ä—Å–∏–∫–æ–≤—ã–π - –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—É—Ç—å")
    print("   üíö –ú—è—Ç–Ω—ã–π - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Ç—å")
    print("   üíú –õ–∞–≤–∞–Ω–¥–æ–≤—ã–π - Attention –º–µ—Ö–∞–Ω–∏–∑–º")
    print("   ü©∑ –†–æ–∑–æ–≤—ã–π - Fuzzy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
    print("   üíô –ù–µ–±–µ—Å–Ω—ã–π - Attention –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
    print("   üíõ –ö—Ä–µ–º–æ–≤—ã–π - Fusion")
    print("   üíö –ú–æ—Ä—Å–∫–æ–π - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")
    
    print("\nüöÄ –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PNG:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://dreampuf.github.io/GraphvizOnline/")
    print("   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ fan_architecture_soft.dot")
    print("   3. –í—Å—Ç–∞–≤—å—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ 'Generate'")
    print("   4. –°–∫–∞—á–∞–π—Ç–µ PNG —Ñ–∞–π–ª")

if __name__ == "__main__":
    main()



