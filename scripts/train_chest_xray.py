#!/usr/bin/env python3
"""
–û–±—É—á–µ–Ω–∏–µ FAN –º–æ–¥–µ–ª–∏ –Ω–∞ Chest X-Ray Pneumonia –¥–∞—Ç–∞—Å–µ—Ç–µ (—Ä–µ–∞–ª—å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç)
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
import numpy as np
from pathlib import Path
import json
import time
from tqdm import tqdm
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, confusion_matrix
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from dataset_manager import DatasetManager
from advanced_fan_model import AdvancedFANModel

class ChestXRayTrainer:
    """–¢—Ä–µ–Ω–µ—Ä –¥–ª—è Chest X-Ray FAN –º–æ–¥–µ–ª–∏"""
    
    def __init__(self, data_dir, model_dir, device='cuda'):
        self.data_dir = Path(data_dir)
        self.model_dir = Path(model_dir)
        self.model_dir.mkdir(parents=True, exist_ok=True)
        self.device = torch.device(device if torch.cuda.is_available() else 'cpu')
        
        print(f"üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã
        self.dataset_manager = DatasetManager()
        self.train_dataset = self.dataset_manager.create_dataset('chest_xray', 'train')
        self.val_dataset = self.dataset_manager.create_dataset('chest_xray', 'val')
        
        print(f"üìä Train samples: {len(self.train_dataset)}")
        print(f"üìä Val samples: {len(self.val_dataset)}")
        print(f"üìä Classes: {self.train_dataset.num_classes}")
        print(f"üè• Medical task: Pneumonia detection from chest X-rays")
        
        # –°–æ–∑–¥–∞–µ–º DataLoader'—ã
        self.train_loader = DataLoader(
            self.train_dataset, 
            batch_size=16, 
            shuffle=True, 
            num_workers=2,
            pin_memory=True if torch.cuda.is_available() else False
        )
        
        self.val_loader = DataLoader(
            self.val_dataset, 
            batch_size=16, 
            shuffle=False, 
            num_workers=2,
            pin_memory=True if torch.cuda.is_available() else False
        )
        
        # –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–∂–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å (–∫–∞–∫ –≤ HAM10000)
        self.model = AdvancedFANModel(
            num_classes=self.train_dataset.num_classes,
            num_heads=8,  # 8 –≥–æ–ª–æ–≤
            hidden_dim=1024,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π hidden_dim
            use_bert=True,
            use_resnet=True
        ).to(self.device)
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å (–µ—â–µ –±–æ–ª—å—à–µ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏)
        self.optimizer = optim.AdamW(self.model.parameters(), lr=1e-5, weight_decay=1e-3)
        self.criterion = nn.CrossEntropyLoss()
        self.scheduler = optim.lr_scheduler.ReduceLROnPlateau(self.optimizer, mode='max', factor=0.3, patience=2)
        
        # Early stopping
        self.best_f1 = 0.0
        self.patience = 5
        self.patience_counter = 0
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.train_losses = []
        self.val_losses = []
        self.val_accuracies = []
        self.val_f1_scores = []
        self.best_f1 = 0.0
        self.best_epoch = 0
        
        print(f"üè• –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–Ω–µ–≤–º–æ–Ω–∏–∏")
        print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏: {sum(p.numel() for p in self.model.parameters()):,}")
    
    def train_epoch(self, epoch):
        """–û–±—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π —ç–ø–æ—Ö–∏"""
        self.model.train()
        total_loss = 0.0
        correct = 0
        total = 0
        
        pbar = tqdm(self.train_loader, desc=f'Epoch {epoch+1}/20 [Train]')
        
        for batch_idx, batch in enumerate(pbar):
            images = batch['image'].to(self.device)
            texts = batch['text_tokens'].to(self.device)
            attention_masks = batch['attention_mask'].to(self.device)
            labels = batch['label'].to(self.device)
            
            self.optimizer.zero_grad()
            
            # –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥
            model_outputs = self.model(texts, attention_masks, images)
            outputs = model_outputs['logits']
            loss = self.criterion(outputs, labels)
            
            # –û–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ—Ö–æ–¥
            loss.backward()
            torch.nn.utils.clip_grad_norm_(self.model.parameters(), max_norm=1.0)
            self.optimizer.step()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_loss += loss.item()
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            pbar.set_postfix({
                'Loss': f'{loss.item():.4f}',
                'Acc': f'{100.*correct/total:.2f}%'
            })
        
        avg_loss = total_loss / len(self.train_loader)
        accuracy = 100. * correct / total
        
        return avg_loss, accuracy
    
    def validate_epoch(self, epoch):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–π —ç–ø–æ—Ö–∏"""
        self.model.eval()
        total_loss = 0.0
        all_predictions = []
        all_labels = []
        
        with torch.no_grad():
            pbar = tqdm(self.val_loader, desc=f'Epoch {epoch+1}/20 [Val]')
            
            for batch in pbar:
                images = batch['image'].to(self.device)
                texts = batch['text_tokens'].to(self.device)
                attention_masks = batch['attention_mask'].to(self.device)
                labels = batch['label'].to(self.device)
                
                # –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥
                model_outputs = self.model(texts, attention_masks, images)
                outputs = model_outputs['logits']
                loss = self.criterion(outputs, labels)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_loss += loss.item()
                _, predicted = torch.max(outputs.data, 1)
                
                all_predictions.extend(predicted.cpu().numpy())
                all_labels.extend(labels.cpu().numpy())
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                pbar.set_postfix({'Loss': f'{loss.item():.4f}'})
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        avg_loss = total_loss / len(self.val_loader)
        accuracy = accuracy_score(all_labels, all_predictions)
        f1 = f1_score(all_labels, all_predictions, average='weighted')
        precision = precision_score(all_labels, all_predictions, average='weighted')
        recall = recall_score(all_labels, all_predictions, average='weighted')
        
        return avg_loss, accuracy, f1, precision, recall, all_predictions, all_labels
    
    def train(self, num_epochs=20):
        """–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        print(f"\nüè• –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ FAN –º–æ–¥–µ–ª–∏ –Ω–∞ Chest X-Ray –¥–∞—Ç–∞—Å–µ—Ç–µ")
        print(f"üìä –≠–ø–æ—Ö: {num_epochs}")
        print(f"üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∑–∞–¥–∞—á–∞: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–Ω–µ–≤–º–æ–Ω–∏–∏ –ø–æ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–º —Å–Ω–∏–º–∫–∞–º")
        print("=" * 70)
        
        start_time = time.time()
        
        for epoch in range(num_epochs):
            epoch_start = time.time()
            
            # –û–±—É—á–µ–Ω–∏–µ
            train_loss, train_acc = self.train_epoch(epoch)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            val_loss, val_acc, val_f1, val_precision, val_recall, predictions, labels = self.validate_epoch(epoch)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º learning rate
            self.scheduler.step(val_f1)
            
            # Early stopping
            if val_f1 > self.best_f1:
                self.best_f1 = val_f1
                self.patience_counter = 0
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
                self.save_model(epoch, val_f1, val_acc, start_time)
            else:
                self.patience_counter += 1
                
            if self.patience_counter >= self.patience:
                print(f"üõë Early stopping –Ω–∞ —ç–ø–æ—Ö–µ {epoch+1}")
                break
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self.train_losses.append(train_loss)
            self.val_losses.append(val_loss)
            self.val_accuracies.append(val_acc)
            self.val_f1_scores.append(val_f1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
            if val_f1 > self.best_f1:
                self.best_f1 = val_f1
                self.best_epoch = epoch
                self.save_model(epoch, val_f1, val_acc)
            
            epoch_time = time.time() - epoch_start
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"\nüìä Epoch {epoch+1}/{num_epochs} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {epoch_time:.1f}s")
            print(f"   Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%")
            print(f"   Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.2f}%")
            print(f"   Val F1: {val_f1:.4f}, Val Precision: {val_precision:.4f}, Val Recall: {val_recall:.4f}")
            print(f"   Learning Rate: {self.scheduler.get_last_lr()[0]:.6f}")
            
            if val_f1 == self.best_f1:
                print(f"   üèÜ –ù–æ–≤—ã–π –ª—É—á—à–∏–π F1: {val_f1:.4f}")
        
        total_time = time.time() - start_time
        print(f"\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time/60:.1f} –º–∏–Ω—É—Ç")
        print(f"üèÜ –õ—É—á—à–∏–π F1 Score: {self.best_f1:.4f} –Ω–∞ —ç–ø–æ—Ö–µ {self.best_epoch+1}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.save_training_metrics()
        self.plot_training_curves()
        
        return self.best_f1
    
    def save_model(self, epoch, f1_score, accuracy, start_time):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"""
        model_path = self.model_dir / f"best_chest_xray_fan_model.pth"
        
        checkpoint = {
            'epoch': epoch,
            'model_state_dict': self.model.state_dict(),
            'optimizer_state_dict': self.optimizer.state_dict(),
            'f1_score': f1_score,
            'accuracy': accuracy,
            'train_losses': self.train_losses,
            'val_losses': self.val_losses,
            'val_accuracies': self.val_accuracies,
            'val_f1_scores': self.val_f1_scores,
            'training_time': time.time() - start_time,
            'dataset_info': {
                'name': 'Chest X-Ray Pneumonia',
                'classes': self.train_dataset.class_names,
                'num_classes': self.train_dataset.num_classes,
                'medical_domain': 'Radiology',
                'diagnostic_task': 'Pneumonia detection'
            }
        }
        
        torch.save(checkpoint, model_path)
        print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_path}")
    
    def save_training_metrics(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
        metrics = {
            'train_losses': self.train_losses,
            'val_losses': self.val_losses,
            'val_accuracies': self.val_accuracies,
            'val_f1_scores': self.val_f1_scores,
            'best_f1': self.best_f1,
            'best_epoch': self.best_epoch,
            'total_epochs': len(self.train_losses),
            'dataset': 'chest_xray',
            'medical_task': 'pneumonia_detection'
        }
        
        metrics_path = self.model_dir / "training_metrics.json"
        with open(metrics_path, 'w') as f:
            json.dump(metrics, f, indent=2)
    
    def plot_training_curves(self):
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))
        
        epochs = range(1, len(self.train_losses) + 1)
        
        # Loss curves
        ax1.plot(epochs, self.train_losses, 'b-', label='Train Loss', linewidth=2)
        ax1.plot(epochs, self.val_losses, 'r-', label='Val Loss', linewidth=2)
        ax1.set_title('Chest X-Ray FAN Training - Loss Curves', fontsize=14, fontweight='bold')
        ax1.set_xlabel('Epoch')
        ax1.set_ylabel('Loss')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # Accuracy curves
        ax2.plot(epochs, self.val_accuracies, 'g-', label='Val Accuracy', linewidth=2)
        ax2.set_title('Chest X-Ray FAN Training - Accuracy', fontsize=14, fontweight='bold')
        ax2.set_xlabel('Epoch')
        ax2.set_ylabel('Accuracy (%)')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        # F1 Score curves
        ax3.plot(epochs, self.val_f1_scores, 'm-', label='Val F1 Score', linewidth=2)
        ax3.set_title('Chest X-Ray FAN Training - F1 Score', fontsize=14, fontweight='bold')
        ax3.set_xlabel('Epoch')
        ax3.set_ylabel('F1 Score')
        ax3.legend()
        ax3.grid(True, alpha=0.3)
        
        # Combined metrics
        ax4.plot(epochs, self.val_accuracies, 'g-', label='Accuracy', linewidth=2)
        ax4.plot(epochs, self.val_f1_scores, 'm-', label='F1 Score', linewidth=2)
        ax4.set_title('Chest X-Ray FAN Training - Combined Metrics', fontsize=14, fontweight='bold')
        ax4.set_xlabel('Epoch')
        ax4.set_ylabel('Score')
        ax4.legend()
        ax4.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(self.model_dir / 'chest_xray_training_metrics.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"üìä –ì—Ä–∞—Ñ–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {self.model_dir / 'chest_xray_training_metrics.png'}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü´Å –û–±—É—á–µ–Ω–∏–µ FAN –º–æ–¥–µ–ª–∏ –Ω–∞ Chest X-Ray Pneumonia –¥–∞—Ç–∞—Å–µ—Ç–µ")
    print("=" * 60)
    print("üè• –†–µ–∞–ª—å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤")
    print("üî¨ –ó–∞–¥–∞—á–∞: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–Ω–µ–≤–º–æ–Ω–∏–∏")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data_dir = Path("data/chest_xray_fan")
    if not data_dir.exists():
        print("‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python scripts/download_chest_xray.py")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
    trainer = ChestXRayTrainer(
        data_dir=data_dir,
        model_dir="models/chest_xray",
        device='cuda' if torch.cuda.is_available() else 'cpu'
    )
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    best_f1 = trainer.train(num_epochs=20)
    
    print(f"\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üèÜ –õ—É—á—à–∏–π F1 Score: {best_f1:.4f}")
    print(f"üìÅ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: models/chest_xray/")
    print(f"üè• –ì–æ—Ç–æ–≤–æ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–Ω–µ–≤–º–æ–Ω–∏–∏!")
    
    return True

if __name__ == "__main__":
    main()
