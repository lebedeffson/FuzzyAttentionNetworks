#!/usr/bin/env python3
"""
–°–∫–∞—á–∏–≤–∞–Ω–∏–µ HAM10000 –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å Kaggle (–≤–µ—Å—å –¥–∞—Ç–∞—Å–µ—Ç, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º)
"""

import os
import sys
import json
import shutil
import zipfile
from pathlib import Path
import random
from PIL import Image
import kaggle
import time

def download_ham10000_full():
    """–°–∫–∞—á–∞—Ç—å –≤–µ—Å—å HAM10000 —Å Kaggle, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º"""
    
    print("üè• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ HAM10000 –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å Kaggle")
    print("=" * 50)
    print("üìä –¶–µ–ª—å: –í–µ—Å—å –¥–∞—Ç–∞—Å–µ—Ç, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    download_dir = Path("data/kaggle_temp")
    if download_dir.exists():
        shutil.rmtree(download_dir)
    download_dir.mkdir(parents=True, exist_ok=True)
    
    print("üì• –°–∫–∞—á–∏–≤–∞–µ–º –≤–µ—Å—å –¥–∞—Ç–∞—Å–µ—Ç...")
    print("üîó –ò—Å—Ç–æ—á–Ω–∏–∫: kmader/skin-cancer-mnist-ham10000")
    print("‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è, –Ω–æ –º—ã –ø–æ–ª—É—á–∏–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ!")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–µ—Å—å –¥–∞—Ç–∞—Å–µ—Ç
        print("üì∏ –°–∫–∞—á–∏–≤–∞–µ–º –≤–µ—Å—å –¥–∞—Ç–∞—Å–µ—Ç...")
        kaggle.api.dataset_download_files(
            'kmader/skin-cancer-mnist-ham10000',
            path=str(download_dir),
            unzip=True
        )
        
        print("‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–∫–∞—á–∞–Ω!")
        return process_full_dataset(download_dir)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        return False

def process_full_dataset(download_dir):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∫–∞—á–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç"""
    
    print("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
    
    # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    all_images = []
    for img_file in download_dir.rglob("*.jpg"):
        all_images.append(img_file)
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    if len(all_images) == 0:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã–±–æ—Ä–∫—É –∏–∑ 500 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    sample_size = min(500, len(all_images))
    sample_images = random.sample(all_images, sample_size)
    
    print(f"üì∏ –°–æ–∑–¥–∞–µ–º –≤—ã–±–æ—Ä–∫—É –∏–∑ {sample_size} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è FAN
    fan_dir = Path("data/ham10000_fan")
    if fan_dir.exists():
        shutil.rmtree(fan_dir)
    fan_dir.mkdir(parents=True, exist_ok=True)
    
    # –ö–ª–∞—Å—Å—ã HAM10000
    class_names = [
        "Melanoma",                    # 0
        "Melanocytic nevus",          # 1
        "Basal cell carcinoma",       # 2
        "Actinic keratosis",          # 3
        "Benign keratosis",           # 4
        "Dermatofibroma",             # 5
        "Vascular lesion"             # 6
    ]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    metadata = []
    for i, img_path in enumerate(sample_images):
        new_name = f"ham10000_{i:04d}.jpg"
        new_path = fan_dir / new_name
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.open(img_path).convert('RGB')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 224x224
            img = img.resize((224, 224), Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            img.save(new_path, 'JPEG', quality=95)
            
            # –°–ª—É—á–∞–π–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∫–ª–∞—Å—Å (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
            label = i % 7
            class_name = class_names[label]
            
            metadata.append({
                "img": new_name,
                "text": f"Skin lesion analysis: {class_name.lower()} with characteristic features",
                "label": label,
                "class_name": class_name,
                "original_path": str(img_path)
            })
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {img_path}: {e}")
            continue
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º train.jsonl
    with open(fan_dir / "train.jsonl", 'w', encoding='utf-8') as f:
        for entry in metadata:
            f.write(json.dumps(entry, ensure_ascii=False) + '\n')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º dataset_info.json
    dataset_info = {
        "name": "HAM10000 Real Kaggle Full",
        "description": "Real HAM10000 skin cancer dataset from Kaggle (full download)",
        "classes": class_names,
        "num_classes": 7,
        "total_samples": len(metadata),
        "source": "Kaggle: kmader/skin-cancer-mnist-ham10000 (full)",
        "download_date": "2024-10-08",
        "note": "Real medical images from HAM10000 dataset - sample from full Kaggle download"
    }
    
    with open(fan_dir / "dataset_info.json", 'w', encoding='utf-8') as f:
        json.dump(dataset_info, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"üìÅ –ü—É—Ç—å: {fan_dir}")
    print(f"üìä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(metadata)}")
    print(f"üè∑Ô∏è –ö–ª–∞—Å—Å–æ–≤: {len(class_names)}")
    print(f"üìè –†–∞–∑–º–µ—Ä: 224x224")
    print(f"üíæ –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Kaggle!")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    shutil.rmtree(download_dir)
    print("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        if download_ham10000_full():
            print("\nüéâ –ù–∞—Å—Ç–æ—è—â–∏–π HAM10000 –¥–∞—Ç–∞—Å–µ—Ç –≥–æ—Ç–æ–≤!")
            print("üìÅ –ü—É—Ç—å: data/ham10000_fan/")
            print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

if __name__ == "__main__":
    main()
