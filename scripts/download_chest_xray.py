#!/usr/bin/env python3
"""
–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Chest X-Ray Pneumonia –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å Kaggle (—Ä–µ–∞–ª—å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç)
"""

import os
import sys
import json
import shutil
import zipfile
from pathlib import Path
import random
from PIL import Image
import kaggle
import time

def download_chest_xray():
    """–°–∫–∞—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π Chest X-Ray Pneumonia –¥–∞—Ç–∞—Å–µ—Ç —Å Kaggle"""
    
    print("ü´Å –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Chest X-Ray Pneumonia –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å Kaggle")
    print("=" * 60)
    print("üìä –¶–µ–ª—å: –†–µ–∞–ª—å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤")
    print("üè• –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: Normal vs Pneumonia")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    download_dir = Path("data/kaggle_chest_temp")
    if download_dir.exists():
        shutil.rmtree(download_dir)
    download_dir.mkdir(parents=True, exist_ok=True)
    
    print("üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç...")
    print("üîó –ò—Å—Ç–æ—á–Ω–∏–∫: paultimothymooney/chest-xray-pneumonia")
    print("‚ö†Ô∏è –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–µ —Å–Ω–∏–º–∫–∏!")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
        print("üì∏ –°–∫–∞—á–∏–≤–∞–µ–º Chest X-Ray –¥–∞—Ç–∞—Å–µ—Ç...")
        print("üìä –†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: ~1.2 GB")
        print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-10 –º–∏–Ω—É—Ç...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        import time
        start_time = time.time()
        
        kaggle.api.dataset_download_files(
            'paultimothymooney/chest-xray-pneumonia',
            path=str(download_dir),
            unzip=True
        )
        
        download_time = time.time() - start_time
        print(f"‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {download_time/60:.1f} –º–∏–Ω—É—Ç")
        
        print("‚úÖ –†–µ–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å–∫–∞—á–∞–Ω!")
        return process_chest_xray_dataset(download_dir)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        return False

def process_chest_xray_dataset(download_dir):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∫–∞—á–∞–Ω–Ω—ã–π Chest X-Ray –¥–∞—Ç–∞—Å–µ—Ç"""
    
    print("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–µ —Å–Ω–∏–º–∫–∏...")
    
    # –ò—â–µ–º –ø–∞–ø–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º __MACOSX)
    train_dir = None
    test_dir = None
    
    for item in download_dir.rglob("*"):
        if item.is_dir() and "train" in item.name.lower() and "__MACOSX" not in str(item):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø–∞–ø–∫–µ –µ—Å—Ç—å –ø–æ–¥–ø–∞–ø–∫–∏ —Å –∫–ª–∞—Å—Å–∞–º–∏
            has_classes = any(subdir.is_dir() for subdir in item.iterdir() if subdir.name in ['NORMAL', 'PNEUMONIA'])
            if has_classes:
                train_dir = item
        elif item.is_dir() and "test" in item.name.lower() and "__MACOSX" not in str(item):
            test_dir = item
    
    if not train_dir:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ train")
        return False
    
    print(f"üìÅ Train –ø–∞–ø–∫–∞: {train_dir}")
    if test_dir:
        print(f"üìÅ Test –ø–∞–ø–∫–∞: {test_dir}")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    all_images = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º train –ø–∞–ø–∫—É
    for class_dir in train_dir.iterdir():
        if class_dir.is_dir():
            class_name = class_dir.name
            print(f"üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å: {class_name}")
            
            for img_file in class_dir.glob("*.jpeg"):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã macOS
                if '__MACOSX' in str(img_file) or img_file.name.startswith('._'):
                    continue
                all_images.append((img_file, class_name))
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_images)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤")
    
    if len(all_images) == 0:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã–±–æ—Ä–∫—É (–±–µ—Ä–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    sample_size = min(1000, len(all_images))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    sample_images = random.sample(all_images, sample_size)
    
    print(f"üì∏ –°–æ–∑–¥–∞–µ–º –≤—ã–±–æ—Ä–∫—É –∏–∑ {sample_size} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è FAN
    fan_dir = Path("data/chest_xray_fan")
    if fan_dir.exists():
        shutil.rmtree(fan_dir)
    fan_dir.mkdir(parents=True, exist_ok=True)
    
    # –ö–ª–∞—Å—Å—ã Chest X-Ray
    class_names = [
        "Normal",      # 0 - –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –ª–µ–≥–∫–∏–µ
        "Pneumonia"    # 1 - –ü–Ω–µ–≤–º–æ–Ω–∏—è
    ]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    metadata = []
    for i, (img_path, class_name) in enumerate(sample_images):
        new_name = f"chest_xray_{i:04d}.jpeg"
        new_path = fan_dir / new_name
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.open(img_path).convert('RGB')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 224x224
            img = img.resize((224, 224), Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            img.save(new_path, 'JPEG', quality=95)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å
            label = 0 if class_name.lower() == "normal" else 1
            class_display_name = class_names[label]
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            if label == 0:
                text_description = "Chest X-ray showing normal lung appearance with clear lung fields, no signs of infection or abnormality"
            else:
                text_description = "Chest X-ray showing signs of pneumonia with lung consolidation, opacity, and potential infection patterns"
            
            metadata.append({
                "img": new_name,
                "text": text_description,
                "label": label,
                "class_name": class_display_name,
                "original_path": str(img_path),
                "medical_condition": class_name
            })
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {img_path}: {e}")
            continue
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º train.jsonl
    with open(fan_dir / "train.jsonl", 'w', encoding='utf-8') as f:
        for entry in metadata:
            f.write(json.dumps(entry, ensure_ascii=False) + '\n')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º dataset_info.json
    dataset_info = {
        "name": "Chest X-Ray Pneumonia Real Dataset",
        "description": "Real medical chest X-ray images for pneumonia classification from Kaggle",
        "classes": class_names,
        "num_classes": 2,
        "total_samples": len(metadata),
        "source": "Kaggle: paultimothymooney/chest-xray-pneumonia",
        "download_date": "2024-12-19",
        "note": "Real medical X-ray images - genuine diagnostic data",
        "medical_domain": "Radiology",
        "diagnostic_task": "Pneumonia detection",
        "image_type": "Chest X-ray",
        "classes_description": {
            "Normal": "Healthy lungs with clear lung fields",
            "Pneumonia": "Lung infection with consolidation and opacity"
        }
    }
    
    with open(fan_dir / "dataset_info.json", 'w', encoding='utf-8') as f:
        json.dump(dataset_info, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω —Ä–µ–∞–ª—å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç")
    print(f"üìÅ –ü—É—Ç—å: {fan_dir}")
    print(f"üìä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(metadata)}")
    print(f"üè∑Ô∏è –ö–ª–∞—Å—Å–æ–≤: {len(class_names)}")
    print(f"üìè –†–∞–∑–º–µ—Ä: 224x224")
    print(f"üè• –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–µ —Å–Ω–∏–º–∫–∏!")
    print(f"üî¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–Ω–µ–≤–º–æ–Ω–∏–∏")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º
    normal_count = sum(1 for entry in metadata if entry['label'] == 0)
    pneumonia_count = sum(1 for entry in metadata if entry['label'] == 1)
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–æ–≤:")
    print(f"   Normal: {normal_count} —Å–Ω–∏–º–∫–æ–≤")
    print(f"   Pneumonia: {pneumonia_count} —Å–Ω–∏–º–∫–æ–≤")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    shutil.rmtree(download_dir)
    print("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        if download_chest_xray():
            print("\nüéâ –†–µ–∞–ª—å–Ω—ã–π Chest X-Ray –¥–∞—Ç–∞—Å–µ—Ç –≥–æ—Ç–æ–≤!")
            print("üìÅ –ü—É—Ç—å: data/chest_xray_fan/")
            print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            print("üè• –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–µ —Å–Ω–∏–º–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–Ω–µ–≤–º–æ–Ω–∏–∏!")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

if __name__ == "__main__":
    main()
