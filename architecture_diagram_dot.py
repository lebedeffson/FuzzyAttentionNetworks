#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä DOT —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å—Ö–µ–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã FAN
–°–æ–∑–¥–∞–µ—Ç .dot —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ PNG —á–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã
"""

def create_fan_architecture_dot():
    """–°–æ–∑–¥–∞–µ—Ç DOT –∫–æ–¥ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ö–µ–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã FAN"""
    
    dot_content = """
digraph FAN_Architecture {
    rankdir=TB;
    size="12,16";
    dpi=300;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∑–ª–æ–≤
    node [fontname="Arial", fontsize=12, shape=box, style=filled];
    edge [fontname="Arial", fontsize=10];
    
    // –¶–≤–µ—Ç–∞
    input_color [fillcolor="#E3F2FD", style=filled];
    text_color [fillcolor="#FFF3E0", style=filled];
    image_color [fillcolor="#E8F5E8", style=filled];
    attention_color [fillcolor="#F3E5F5", style=filled];
    fuzzy_color [fillcolor="#FFEBEE", style=filled];
    output_color [fillcolor="#E0F2F1", style=filled];
    fusion_color [fillcolor="#FFF8E1", style=filled];
    
    // –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    subgraph cluster_inputs {
        label="Input Layer";
        style=filled;
        color=lightgray;
        fontsize=14;
        fontname="Arial Bold";
        
        text_input [label="Text Input\\n\\"Golden retriever dog\\"", fillcolor="#E3F2FD", shape=ellipse];
        image_input [label="Image Input\\n224√ó224√ó3", fillcolor="#E3F2FD", shape=ellipse];
    }
    
    // –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—É—Ç—å
    subgraph cluster_text {
        label="Text Processing Pipeline";
        style=filled;
        color=lightgray;
        fontsize=14;
        fontname="Arial Bold";
        
        bert_tokenizer [label="BERT Tokenizer\\n[CLS] golden retriever [SEP]", fillcolor="#FFF3E0"];
        bert_encoder [label="BERT Encoder\\n12 Layers, 768-dim", fillcolor="#FFF3E0"];
        text_projection [label="Text Projection\\nLinear(768‚Üí512)", fillcolor="#FFF3E0"];
    }
    
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Ç—å
    subgraph cluster_image {
        label="Image Processing Pipeline";
        style=filled;
        color=lightgray;
        fontsize=14;
        fontname="Arial Bold";
        
        resnet_backbone [label="ResNet Backbone\\nResNet50/ResNet18", fillcolor="#E8F5E8"];
        image_projection [label="Image Projection\\nLinear(2048‚Üí512)", fillcolor="#E8F5E8"];
    }
    
    // Fuzzy Attention –º–µ—Ö–∞–Ω–∏–∑–º
    subgraph cluster_fuzzy_attention {
        label="Fuzzy Attention Mechanism";
        style=filled;
        color=lightgray;
        fontsize=14;
        fontname="Arial Bold";
        
        query_proj [label="Query Projection\\nLinear(512‚Üí512)", fillcolor="#F3E5F5"];
        key_proj [label="Key Projection\\nLinear(512‚Üí512)", fillcolor="#F3E5F5"];
        value_proj [label="Value Projection\\nLinear(512‚Üí512)", fillcolor="#F3E5F5"];
        
        fuzzy_centers [label="Fuzzy Centers\\nŒº‚ÇÅ, Œº‚ÇÇ, ..., Œº‚Çñ", fillcolor="#FFEBEE", shape=diamond];
        fuzzy_widths [label="Fuzzy Widths\\nœÉ‚ÇÅ, œÉ‚ÇÇ, ..., œÉ‚Çñ", fillcolor="#FFEBEE", shape=diamond];
        
        bell_membership [label="Bell Membership\\nŒº(x) = 1/(1+((x-Œº)/œÉ)¬≤)", fillcolor="#FFEBEE", shape=ellipse];
        
        attention_weights [label="Attention Weights\\nSoftmax(QK·µÄ/‚àöd)", fillcolor="#F3E5F5"];
        attended_values [label="Attended Values\\nAttention √ó V", fillcolor="#F3E5F5"];
    }
    
    // –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ
    subgraph cluster_fusion {
        label="Multimodal Fusion";
        style=filled;
        color=lightgray;
        fontsize=14;
        fontname="Arial Bold";
        
        concat_fusion [label="Concatenation\\n[text; image; attention]", fillcolor="#FFF8E1"];
        fusion_layer [label="Fusion Layer\\nLinear(1536‚Üí512)", fillcolor="#FFF8E1"];
        dropout [label="Dropout\\np=0.1", fillcolor="#FFF8E1"];
        relu [label="ReLU Activation", fillcolor="#FFF8E1"];
    }
    
    // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    subgraph cluster_classifier {
        label="Classification Head";
        style=filled;
        color=lightgray;
        fontsize=14;
        fontname="Arial Bold";
        
        classifier [label="Classifier\\nLinear(512‚Üínum_classes)", fillcolor="#E0F2F1"];
        softmax [label="Softmax\\nProbability Distribution", fillcolor="#E0F2F1"];
        prediction [label="Prediction\\nClass + Confidence", fillcolor="#E0F2F1", shape=ellipse];
    }
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—É—Ç—å
    text_input -> bert_tokenizer [label="Tokenize"];
    bert_tokenizer -> bert_encoder [label="Encode"];
    bert_encoder -> text_projection [label="Project"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Ç—å
    image_input -> resnet_backbone [label="Extract Features"];
    resnet_backbone -> image_projection [label="Project"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - attention –º–µ—Ö–∞–Ω–∏–∑–º
    text_projection -> query_proj [label="Q"];
    text_projection -> key_proj [label="K"];
    text_projection -> value_proj [label="V"];
    
    fuzzy_centers -> bell_membership [label="Œº"];
    fuzzy_widths -> bell_membership [label="œÉ"];
    query_proj -> attention_weights [label="Q"];
    key_proj -> attention_weights [label="K"];
    bell_membership -> attention_weights [label="Fuzzy Modulate"];
    attention_weights -> attended_values [label="Attention"];
    value_proj -> attended_values [label="V"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - fusion
    text_projection -> concat_fusion [label="Text Features"];
    image_projection -> concat_fusion [label="Image Features"];
    attended_values -> concat_fusion [label="Attended Features"];
    
    concat_fusion -> fusion_layer [label="Fuse"];
    fusion_layer -> dropout [label="Regularize"];
    dropout -> relu [label="Activate"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    relu -> classifier [label="Classify"];
    classifier -> softmax [label="Normalize"];
    softmax -> prediction [label="Output"];
    
    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã
    formula1 [label="Attention(Q,K,V) = softmax(QK^T/‚àöd + F(Œº,œÉ))V", fillcolor=white, shape=plaintext, fontsize=10];
    formula2 [label="F(Œº,œÉ) = Œ£·µ¢ 1/(1+((x-Œº·µ¢)/œÉ·µ¢)¬≤)", fillcolor=white, shape=plaintext, fontsize=10];
    
    // –°–æ–µ–¥–∏–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—ã
    formula1 -> attention_weights [style=dashed, color=gray];
    formula2 -> bell_membership [style=dashed, color=gray];
}
"""
    return dot_content

def create_attention_head_dot():
    """–°–æ–∑–¥–∞–µ—Ç DOT –∫–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã attention head"""
    
    dot_content = """
digraph AttentionHeadDetail {
    rankdir=LR;
    size="10,8";
    dpi=300;
    
    node [fontname="Arial", fontsize=11, shape=box, style=filled];
    
    // –í—Ö–æ–¥—ã
    Q [label="Query\\nQ ‚àà R^(d√ód)", fillcolor="#E3F2FD"];
    K [label="Key\\nK ‚àà R^(d√ód)", fillcolor="#E3F2FD"];
    V [label="Value\\nV ‚àà R^(d√ód)", fillcolor="#E3F2FD"];
    
    // Attention computation
    QK [label="QK^T\\nAttention Scores", fillcolor="#F3E5F5"];
    scale [label="Scale\\n√∑‚àöd", fillcolor="#F3E5F5"];
    
    // Fuzzy modulation
    fuzzy_mod [label="Fuzzy Modulation\\nF(Œº,œÉ)", fillcolor="#FFEBEE"];
    softmax [label="Softmax\\nNormalization", fillcolor="#F3E5F5"];
    
    // Output
    output [label="Attention(Q,K,V)\\nWeighted Values", fillcolor="#E0F2F1"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    Q -> QK [label="√ó"];
    K -> QK [label="√ó"];
    QK -> scale [label="Scale"];
    scale -> fuzzy_mod [label="+"];
    fuzzy_mod -> softmax [label="Modulate"];
    softmax -> output [label="√ó"];
    V -> output [label="√ó"];
}
"""
    return dot_content

def create_fuzzy_functions_dot():
    """–°–æ–∑–¥–∞–µ—Ç DOT –∫–æ–¥ –¥–ª—è —Å—Ö–µ–º—ã fuzzy membership functions"""
    
    dot_content = """
digraph FuzzyMembershipFunctions {
    rankdir=TB;
    size="8,6";
    dpi=300;
    
    node [fontname="Arial", fontsize=11, shape=box, style=filled];
    
    // Input
    input [label="Input Value\\nx ‚àà [0,1]", fillcolor="#E3F2FD", shape=ellipse];
    
    // Fuzzy functions
    f1 [label="Very Low\\nŒº‚ÇÅ=0.1, œÉ‚ÇÅ=0.3", fillcolor="#FFCDD2"];
    f2 [label="Low\\nŒº‚ÇÇ=0.3, œÉ‚ÇÇ=0.4", fillcolor="#F8BBD9"];
    f3 [label="Medium\\nŒº‚ÇÉ=0.5, œÉ‚ÇÉ=0.5", fillcolor="#E1BEE7"];
    f4 [label="High\\nŒº‚ÇÑ=0.7, œÉ‚ÇÑ=0.4", fillcolor="#C5CAE9"];
    f5 [label="Very High\\nŒº‚ÇÖ=0.9, œÉ‚ÇÖ=0.3", fillcolor="#BBDEFB"];
    f6 [label="Extreme\\nŒº‚ÇÜ=1.1, œÉ‚ÇÜ=0.2", fillcolor="#B3E5FC"];
    f7 [label="Critical\\nŒº‚Çá=1.3, œÉ‚Çá=0.1", fillcolor="#B2EBF2"];
    
    // Output
    output [label="Membership Degrees\\n[Œº‚ÇÅ(x), Œº‚ÇÇ(x), ..., Œº‚Çá(x)]", fillcolor="#E0F2F1", shape=ellipse];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    input -> f1 [label="Œº(x)"];
    input -> f2 [label="Œº(x)"];
    input -> f3 [label="Œº(x)"];
    input -> f4 [label="Œº(x)"];
    input -> f5 [label="Œº(x)"];
    input -> f6 [label="Œº(x)"];
    input -> f7 [label="Œº(x)"];
    
    f1 -> output [label=""];
    f2 -> output [label=""];
    f3 -> output [label=""];
    f4 -> output [label=""];
    f5 -> output [label=""];
    f6 -> output [label=""];
    f7 -> output [label=""];
}
"""
    return dot_content

def main():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ DOT —Ñ–∞–π–ª—ã"""
    
    print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DOT —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å—Ö–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã FAN...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º
    import os
    os.makedirs('diagrams', exist_ok=True)
    
    # 1. –û—Å–Ω–æ–≤–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ö–µ–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
    main_dot = create_fan_architecture_dot()
    with open('diagrams/fan_architecture.dot', 'w', encoding='utf-8') as f:
        f.write(main_dot)
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: diagrams/fan_architecture.dot")
    
    # 2. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ attention head
    print("üîç –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã attention head...")
    attention_dot = create_attention_head_dot()
    with open('diagrams/attention_head_detail.dot', 'w', encoding='utf-8') as f:
        f.write(attention_dot)
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: diagrams/attention_head_detail.dot")
    
    # 3. Fuzzy membership functions
    print("üß† –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã fuzzy membership functions...")
    fuzzy_dot = create_fuzzy_functions_dot()
    with open('diagrams/fuzzy_membership_functions.dot', 'w', encoding='utf-8') as f:
        f.write(fuzzy_dot)
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: diagrams/fuzzy_membership_functions.dot")
    
    print("\nüéâ –í—Å–µ DOT —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'diagrams/'")
    print("\nüìù –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PNG:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://dreampuf.github.io/GraphvizOnline/")
    print("   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .dot —Ñ–∞–π–ª–∞")
    print("   3. –í—Å—Ç–∞–≤—å—Ç–µ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ 'Generate'")
    print("   4. –°–∫–∞—á–∞–π—Ç–µ PNG —Ñ–∞–π–ª")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ LaTeX –∫–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    create_latex_code()

def create_latex_code():
    """–°–æ–∑–¥–∞–µ—Ç LaTeX –∫–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º –≤ —Å—Ç–∞—Ç—å—é"""
    
    latex_code = """
% LaTeX –∫–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º FAN –≤ —Å—Ç–∞—Ç—å—é
% –î–æ–±–∞–≤—å—Ç–µ –≤ –ø—Ä–µ–∞–º–±—É–ª—É: \\usepackage{graphicx}

\\begin{figure}[htbp]
    \\centering
    \\includegraphics[width=0.9\\textwidth]{diagrams/fan_architecture.png}
    \\caption{–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Fuzzy Attention Networks (FAN). –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã (—Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–Ω–∫–æ–¥–µ—Ä—ã, –ø—Ä–∏–º–µ–Ω—è–µ—Ç fuzzy attention –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –º–æ–¥—É–ª—è—Ü–∏–∏ attention weights, –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.}
    \\label{fig:fan_architecture}
\\end{figure}

\\begin{figure}[htbp]
    \\centering
    \\includegraphics[width=0.8\\textwidth]{diagrams/attention_head_detail.png}
    \\caption{–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ fuzzy attention head. Attention weights –º–æ–¥—É–ª–∏—Ä—É—é—Ç—Å—è fuzzy membership —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏.}
    \\label{fig:attention_detail}
\\end{figure}

\\begin{figure}[htbp]
    \\centering
    \\includegraphics[width=0.6\\textwidth]{diagrams/fuzzy_membership_functions.png}
    \\caption{–ù–∞–±–æ—Ä fuzzy membership —Ñ—É–Ω–∫—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–ª—è –º–æ–¥—É–ª—è—Ü–∏–∏ attention weights. –ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—É—é —Å—Ç–µ–ø–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.}
    \\label{fig:fuzzy_functions}
\\end{figure}

% –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TikZ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º –ø—Ä—è–º–æ –≤ LaTeX
\\usepackage{tikz}
\\usetikzlibrary{shapes,arrows,positioning}

\\begin{figure}[htbp]
    \\centering
    \\begin{tikzpicture}[node distance=2cm, auto]
        % –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å TikZ –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        \\node (input) {Input};
        \\node (output) [right of=input] {Output};
        \\draw [->] (input) -- (output);
    \\end{tikzpicture}
    \\caption{–ü—Ä–∏–º–µ—Ä TikZ –¥–∏–∞–≥—Ä–∞–º–º—ã}
    \\label{fig:tikz_example}
\\end{figure}
"""
    
    with open('diagrams/latex_code.tex', 'w', encoding='utf-8') as f:
        f.write(latex_code)
    
    print("üìù LaTeX –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: diagrams/latex_code.tex")

if __name__ == "__main__":
    main()



