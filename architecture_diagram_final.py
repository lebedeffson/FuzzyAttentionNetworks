#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Å—Ö–µ–º–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã FAN –¥–ª—è —Å—Ç–∞—Ç—å–∏
–û–¥–Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏, –±–µ–∑ —Å–µ—Ä—ã—Ö –±–ª–æ–∫–æ–≤
"""

def create_final_fan_architecture():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫—Ä–∞—Å–∏–≤—É—é —Å—Ö–µ–º—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã FAN"""
    
    dot_content = """
digraph FAN_Architecture {
    rankdir=TB;
    size="10,12";
    dpi=300;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∑–ª–æ–≤
    node [fontname="Arial", fontsize=11, shape=box, style=filled, penwidth=2];
    edge [fontname="Arial", fontsize=9, penwidth=2];
    
    // –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞
    text_input [label="Text Input\\n\\"Golden retriever dog\\"", fillcolor="#FF6B6B", shape=ellipse, fontcolor=white];
    image_input [label="Image Input\\n224√ó224√ó3", fillcolor="#4ECDC4", shape=ellipse, fontcolor=white];
    
    // –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—É—Ç—å - –æ—Ä–∞–Ω–∂–µ–≤—ã–µ —Ç–æ–Ω–∞
    bert_tokenizer [label="BERT Tokenizer", fillcolor="#FFB74D", fontcolor=white];
    bert_encoder [label="BERT Encoder\\n12 Layers", fillcolor="#FF8A65", fontcolor=white];
    text_projection [label="Text Projection\\n768‚Üí512", fillcolor="#FF7043", fontcolor=white];
    
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Ç—å - –∑–µ–ª–µ–Ω—ã–µ —Ç–æ–Ω–∞
    resnet_backbone [label="ResNet Backbone", fillcolor="#81C784", fontcolor=white];
    image_projection [label="Image Projection\\n2048‚Üí512", fillcolor="#66BB6A", fontcolor=white];
    
    // Attention –º–µ—Ö–∞–Ω–∏–∑–º - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ —Ç–æ–Ω–∞
    query_proj [label="Query\\nLinear(512‚Üí512)", fillcolor="#BA68C8", fontcolor=white];
    key_proj [label="Key\\nLinear(512‚Üí512)", fillcolor="#AB47BC", fontcolor=white];
    value_proj [label="Value\\nLinear(512‚Üí512)", fillcolor="#9C27B0", fontcolor=white];
    
    // Fuzzy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - —Ä–æ–∑–æ–≤—ã–µ —Ç–æ–Ω–∞
    fuzzy_centers [label="Fuzzy Centers\\nŒº‚ÇÅ, Œº‚ÇÇ, ..., Œº‚Çñ", fillcolor="#F06292", shape=diamond, fontcolor=white];
    fuzzy_widths [label="Fuzzy Widths\\nœÉ‚ÇÅ, œÉ‚ÇÇ, ..., œÉ‚Çñ", fillcolor="#EC407A", shape=diamond, fontcolor=white];
    bell_membership [label="Bell Membership\\nŒº(x) = 1/(1+((x-Œº)/œÉ)¬≤)", fillcolor="#E91E63", shape=ellipse, fontcolor=white];
    
    // Attention –≤—ã—á–∏—Å–ª–µ–Ω–∏—è - —Å–∏–Ω–∏–µ —Ç–æ–Ω–∞
    attention_weights [label="Attention Weights\\nSoftmax(QK·µÄ/‚àöd)", fillcolor="#42A5F5", fontcolor=white];
    attended_values [label="Attended Values\\nAttention √ó V", fillcolor="#2196F3", fontcolor=white];
    
    // Fusion - –∂–µ–ª—Ç—ã–µ —Ç–æ–Ω–∞
    concat_fusion [label="Concatenation\\n[text; image; attention]", fillcolor="#FFD54F", fontcolor=black];
    fusion_layer [label="Fusion Layer\\nLinear(1536‚Üí512)", fillcolor="#FFC107", fontcolor=black];
    dropout [label="Dropout + ReLU", fillcolor="#FFB300", fontcolor=black];
    
    // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä - –±–∏—Ä—é–∑–æ–≤—ã–µ —Ç–æ–Ω–∞
    classifier [label="Classifier\\nLinear(512‚Üíclasses)", fillcolor="#26C6DA", fontcolor=white];
    softmax [label="Softmax", fillcolor="#00BCD4", fontcolor=white];
    prediction [label="Prediction\\nClass + Confidence", fillcolor="#00ACC1", shape=ellipse, fontcolor=white];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—É—Ç—å
    text_input -> bert_tokenizer [label="Tokenize", color="#FF6B6B"];
    bert_tokenizer -> bert_encoder [label="Encode", color="#FF8A65"];
    bert_encoder -> text_projection [label="Project", color="#FF7043"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Ç—å
    image_input -> resnet_backbone [label="Extract", color="#4ECDC4"];
    resnet_backbone -> image_projection [label="Project", color="#66BB6A"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - attention –º–µ—Ö–∞–Ω–∏–∑–º
    text_projection -> query_proj [label="Q", color="#FF7043"];
    text_projection -> key_proj [label="K", color="#FF7043"];
    text_projection -> value_proj [label="V", color="#FF7043"];
    
    fuzzy_centers -> bell_membership [label="Œº", color="#F06292"];
    fuzzy_widths -> bell_membership [label="œÉ", color="#EC407A"];
    
    query_proj -> attention_weights [label="Q", color="#BA68C8"];
    key_proj -> attention_weights [label="K", color="#AB47BC"];
    bell_membership -> attention_weights [label="Fuzzy", color="#E91E63"];
    
    attention_weights -> attended_values [label="Attend", color="#42A5F5"];
    value_proj -> attended_values [label="V", color="#9C27B0"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - fusion
    text_projection -> concat_fusion [label="Text", color="#FF7043"];
    image_projection -> concat_fusion [label="Image", color="#66BB6A"];
    attended_values -> concat_fusion [label="Attention", color="#2196F3"];
    
    concat_fusion -> fusion_layer [label="Fuse", color="#FFD54F"];
    fusion_layer -> dropout [label="Process", color="#FFC107"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    dropout -> classifier [label="Classify", color="#FFB300"];
    classifier -> softmax [label="Normalize", color="#26C6DA"];
    softmax -> prediction [label="Output", color="#00BCD4"];
    
    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞
    formula [label="Attention(Q,K,V) = softmax(QK^T/‚àöd + F(Œº,œÉ))V", 
             fillcolor=white, shape=plaintext, fontsize=10, fontcolor="#333333"];
    
    // –°–æ–µ–¥–∏–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É
    formula -> attention_weights [style=dashed, color=gray];
}
"""
    return dot_content

def main():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É"""
    
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫—Ä–∞—Å–∏–≤–æ–π —Å—Ö–µ–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã FAN...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    import os
    os.makedirs('diagrams', exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É
    final_dot = create_final_fan_architecture()
    with open('diagrams/fan_architecture_final.dot', 'w', encoding='utf-8') as f:
        f.write(final_dot)
    
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: diagrams/fan_architecture_final.dot")
    
    # –°–æ–∑–¥–∞–µ–º LaTeX –∫–æ–¥
    latex_code = """
% –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã FAN –¥–ª—è —Å—Ç–∞—Ç—å–∏
\\begin{figure}[htbp]
    \\centering
    \\includegraphics[width=0.85\\textwidth]{diagrams/fan_architecture_final.png}
    \\caption{–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Fuzzy Attention Networks (FAN). –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã —á–µ—Ä–µ–∑ BERT –∏ ResNet —ç–Ω–∫–æ–¥–µ—Ä—ã, –ø—Ä–∏–º–µ–Ω—è–µ—Ç fuzzy attention –º–µ—Ö–∞–Ω–∏–∑–º —Å bell membership —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –º–æ–¥—É–ª—è—Ü–∏–∏ attention weights, –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.}
    \\label{fig:fan_architecture}
\\end{figure}
"""
    
    with open('diagrams/latex_final.tex', 'w', encoding='utf-8') as f:
        f.write(latex_code)
    
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: diagrams/latex_final.tex")
    
    print("\nüéâ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞!")
    print("üìÅ –§–∞–π–ª: diagrams/fan_architecture_final.dot")
    print("üìù LaTeX: diagrams/latex_final.tex")
    print("\nüöÄ –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PNG:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://dreampuf.github.io/GraphvizOnline/")
    print("   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ fan_architecture_final.dot")
    print("   3. –í—Å—Ç–∞–≤—å—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ 'Generate'")
    print("   4. –°–∫–∞—á–∞–π—Ç–µ PNG —Ñ–∞–π–ª")
    
    print("\nüé® –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞:")
    print("   üî¥ –ö—Ä–∞—Å–Ω—ã–π - –í—Ö–æ–¥—ã")
    print("   üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π - –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—É—Ç—å")
    print("   üü¢ –ó–µ–ª–µ–Ω—ã–π - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Ç—å")
    print("   üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π - Attention –º–µ—Ö–∞–Ω–∏–∑–º")
    print("   ü©∑ –†–æ–∑–æ–≤—ã–π - Fuzzy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
    print("   üîµ –°–∏–Ω–∏–π - Attention –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
    print("   üü° –ñ–µ–ª—Ç—ã–π - Fusion")
    print("   üî∑ –ë–∏—Ä—é–∑–æ–≤—ã–π - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")

if __name__ == "__main__":
    main()



