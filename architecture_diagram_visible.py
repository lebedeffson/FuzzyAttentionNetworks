#!/usr/bin/env python3
"""
–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã FAN —Å —Ö–æ—Ä–æ—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Å —á–µ—Ç–∫–∏–º–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞–º–∏
"""

def create_visible_fan_architecture():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ö–µ–º—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã FAN —Å —Ö–æ—Ä–æ—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é"""
    
    dot_content = """
digraph FAN_Architecture {
    rankdir=TB;
    size="10,12";
    dpi=300;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∑–ª–æ–≤ - —á–µ—Ç–∫–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—ã
    node [fontname="Arial", fontsize=10, shape=box, style=filled, penwidth=1.5];
    edge [fontname="Arial", fontsize=9, penwidth=1.5, color="#333333"];
    
    // –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —Å–≤–µ—Ç–ª—ã–µ —Å —Ç–µ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    text_input [label="Text Input\\n\\"Golden retriever dog\\"", fillcolor="#E6F3FF", shape=ellipse, fontcolor="#000000", penwidth=2];
    image_input [label="Image Input\\n224√ó224√ó3", fillcolor="#E6FFE6", shape=ellipse, fontcolor="#000000", penwidth=2];
    
    // –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—É—Ç—å - —Å–≤–µ—Ç–ª—ã–µ —Å–µ—Ä—ã–µ
    bert_tokenizer [label="BERT Tokenizer", fillcolor="#F0F0F0", fontcolor="#000000"];
    bert_encoder [label="BERT Encoder\\n12 Layers", fillcolor="#E0E0E0", fontcolor="#000000"];
    text_projection [label="Text Projection\\nLinear(768‚Üí512)", fillcolor="#D0D0D0", fontcolor="#000000"];
    
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Ç—å - —Å–≤–µ—Ç–ª—ã–µ —Å–µ—Ä—ã–µ
    resnet_backbone [label="ResNet Backbone", fillcolor="#F0F0F0", fontcolor="#000000"];
    image_projection [label="Image Projection\\nLinear(2048‚Üí512)", fillcolor="#E0E0E0", fontcolor="#000000"];
    
    // Attention –º–µ—Ö–∞–Ω–∏–∑–º - —Å—Ä–µ–¥–Ω–∏–µ —Å–µ—Ä—ã–µ
    query_proj [label="Query\\nLinear(512‚Üí512)", fillcolor="#B8B8B8", fontcolor="#000000"];
    key_proj [label="Key\\nLinear(512‚Üí512)", fillcolor="#B8B8B8", fontcolor="#000000"];
    value_proj [label="Value\\nLinear(512‚Üí512)", fillcolor="#B8B8B8", fontcolor="#000000"];
    
    // Fuzzy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - —Ç–µ–º–Ω—ã–µ —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º
    fuzzy_centers [label="Fuzzy Centers\\nŒº‚ÇÅ, Œº‚ÇÇ, ..., Œº‚Çñ", fillcolor="#606060", shape=diamond, fontcolor="#FFFFFF"];
    fuzzy_widths [label="Fuzzy Widths\\nœÉ‚ÇÅ, œÉ‚ÇÇ, ..., œÉ‚Çñ", fillcolor="#606060", shape=diamond, fontcolor="#FFFFFF"];
    bell_membership [label="Bell Membership\\nŒº(x) = 1/(1+((x-Œº)/œÉ)¬≤)", fillcolor="#404040", shape=ellipse, fontcolor="#FFFFFF"];
    
    // Attention –≤—ã—á–∏—Å–ª–µ–Ω–∏—è - —Å—Ä–µ–¥–Ω–∏–µ —Å–µ—Ä—ã–µ
    attention_weights [label="Attention Weights\\nSoftmax(QK·µÄ/‚àöd)", fillcolor="#A0A0A0", fontcolor="#000000"];
    attended_values [label="Attended Values\\nAttention √ó V", fillcolor="#909090", fontcolor="#000000"];
    
    // Fusion - —Å–≤–µ—Ç–ª—ã–µ —Å–µ—Ä—ã–µ
    concat_fusion [label="Concatenation\\n[text; image; attention]", fillcolor="#F5F5F5", fontcolor="#000000"];
    fusion_layer [label="Fusion Layer\\nLinear(1536‚Üí512)", fillcolor="#E8E8E8", fontcolor="#000000"];
    dropout [label="Dropout + ReLU", fillcolor="#D8D8D8", fontcolor="#000000"];
    
    // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä - —Ç–µ–º–Ω—ã–µ —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º
    classifier [label="Classifier\\nLinear(512‚Üínum_classes)", fillcolor="#505050", fontcolor="#FFFFFF"];
    softmax [label="Softmax", fillcolor="#404040", fontcolor="#FFFFFF"];
    prediction [label="Prediction\\nClass + Confidence", fillcolor="#303030", shape=ellipse, fontcolor="#FFFFFF"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—É—Ç—å
    text_input -> bert_tokenizer [label="Tokenize", color="#000000"];
    bert_tokenizer -> bert_encoder [label="Encode", color="#000000"];
    bert_encoder -> text_projection [label="Project", color="#000000"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Ç—å
    image_input -> resnet_backbone [label="Extract", color="#000000"];
    resnet_backbone -> image_projection [label="Project", color="#000000"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - attention –º–µ—Ö–∞–Ω–∏–∑–º
    text_projection -> query_proj [label="Q", color="#000000"];
    text_projection -> key_proj [label="K", color="#000000"];
    text_projection -> value_proj [label="V", color="#000000"];
    
    fuzzy_centers -> bell_membership [label="Œº", color="#000000"];
    fuzzy_widths -> bell_membership [label="œÉ", color="#000000"];
    
    query_proj -> attention_weights [label="Q", color="#000000"];
    key_proj -> attention_weights [label="K", color="#000000"];
    bell_membership -> attention_weights [label="Fuzzy Modulate", color="#000000"];
    
    attention_weights -> attended_values [label="Attention", color="#000000"];
    value_proj -> attended_values [label="V", color="#000000"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - fusion
    text_projection -> concat_fusion [label="Text Features", color="#000000"];
    image_projection -> concat_fusion [label="Image Features", color="#000000"];
    attended_values -> concat_fusion [label="Attended Features", color="#000000"];
    
    concat_fusion -> fusion_layer [label="Fuse", color="#000000"];
    fusion_layer -> dropout [label="Process", color="#000000"];
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    dropout -> classifier [label="Classify", color="#000000"];
    classifier -> softmax [label="Normalize", color="#000000"];
    softmax -> prediction [label="Output", color="#000000"];
    
    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ - —á–µ—Ç–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    formula [label="Attention(Q,K,V) = softmax(QK^T/‚àöd + F(Œº,œÉ))V", 
             fillcolor="#FFFFFF", shape=plaintext, fontsize=9, fontcolor="#000000", penwidth=1];
    
    // –°–æ–µ–¥–∏–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É
    formula -> attention_weights [style=dashed, color="#666666"];
}
"""
    return dot_content

def main():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ö–µ–º—É —Å —Ö–æ—Ä–æ—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é"""
    
    print("üëÅÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã FAN —Å —Ö–æ—Ä–æ—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    import os
    os.makedirs('diagrams', exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É —Å —Ö–æ—Ä–æ—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é
    visible_dot = create_visible_fan_architecture()
    with open('diagrams/fan_architecture_visible.dot', 'w', encoding='utf-8') as f:
        f.write(visible_dot)
    
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: diagrams/fan_architecture_visible.dot")
    
    # –°–æ–∑–¥–∞–µ–º LaTeX –∫–æ–¥
    latex_code = """
% –°—Ö–µ–º–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã FAN —Å —Ö–æ—Ä–æ—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é
\\begin{figure}[htbp]
    \\centering
    \\includegraphics[width=0.85\\textwidth]{diagrams/fan_architecture_visible.png}
    \\caption{–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Fuzzy Attention Networks (FAN). –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã —á–µ—Ä–µ–∑ BERT –∏ ResNet —ç–Ω–∫–æ–¥–µ—Ä—ã, –ø—Ä–∏–º–µ–Ω—è–µ—Ç fuzzy attention –º–µ—Ö–∞–Ω–∏–∑–º —Å bell membership —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –º–æ–¥—É–ª—è—Ü–∏–∏ attention weights, –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.}
    \\label{fig:fan_architecture}
\\end{figure}
"""
    
    with open('diagrams/latex_visible.tex', 'w', encoding='utf-8') as f:
        f.write(latex_code)
    
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: diagrams/latex_visible.tex")
    
    print("\nüëÅÔ∏è –°—Ö–µ–º–∞ —Å —Ö–æ—Ä–æ—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–Ω–∞!")
    print("üìÅ –§–∞–π–ª: diagrams/fan_architecture_visible.dot")
    print("üìù LaTeX: diagrams/latex_visible.tex")
    
    print("\nüé® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (—Ö–æ—Ä–æ—à–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å):")
    print("   ‚ö™ –°–≤–µ—Ç–ª—ã–µ —Ñ–æ–Ω—ã —Å —Ç–µ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º")
    print("   ‚ö´ –¢–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º")
    print("   üìè –ß–µ—Ç–∫–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—ã")
    print("   üîç –•–æ—Ä–æ—à–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å")
    print("   üì∞ –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å")
    print("   üìä –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
    
    print("\nüöÄ –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PNG:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://dreampuf.github.io/GraphvizOnline/")
    print("   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ fan_architecture_visible.dot")
    print("   3. –í—Å—Ç–∞–≤—å—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ 'Generate'")
    print("   4. –°–∫–∞—á–∞–π—Ç–µ PNG —Ñ–∞–π–ª")
    
    print("\nüìñ –ì–æ—Ç–æ–≤–æ –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Å –æ—Ç–ª–∏—á–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é!")

if __name__ == "__main__":
    main()



